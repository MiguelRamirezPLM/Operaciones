//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediVet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PEV : DbContext
    {
        public PEV()
            : base("name=PEV")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActiveSubstances> ActiveSubstances { get; set; }
        public virtual DbSet<Advertisements> Advertisements { get; set; }
        public virtual DbSet<AttributeGroup> AttributeGroup { get; set; }
        public virtual DbSet<Attributes> Attributes { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<DivisionCategories> DivisionCategories { get; set; }
        public virtual DbSet<DivisionImages> DivisionImages { get; set; }
        public virtual DbSet<DivisionInformation> DivisionInformation { get; set; }
        public virtual DbSet<Divisions> Divisions { get; set; }
        public virtual DbSet<EditionAttributeGroup> EditionAttributeGroup { get; set; }
        public virtual DbSet<EditionAttributes> EditionAttributes { get; set; }
        public virtual DbSet<EditionDivisionAds> EditionDivisionAds { get; set; }
        public virtual DbSet<EditionDivisionProducts> EditionDivisionProducts { get; set; }
        public virtual DbSet<EditionProductShots> EditionProductShots { get; set; }
        public virtual DbSet<Editions> Editions { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<ImageTypes> ImageTypes { get; set; }
        public virtual DbSet<Laboratories> Laboratories { get; set; }
        public virtual DbSet<MentionatedProducts> MentionatedProducts { get; set; }
        public virtual DbSet<ParticipantProducts> ParticipantProducts { get; set; }
        public virtual DbSet<PharmaceuticalForms> PharmaceuticalForms { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductContents> ProductContents { get; set; }
        public virtual DbSet<ProductPharmaForms> ProductPharmaForms { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductShotTypes> ProductShotTypes { get; set; }
        public virtual DbSet<ProductTypes> ProductTypes { get; set; }
        public virtual DbSet<Species> Species { get; set; }
        public virtual DbSet<Stocks> Stocks { get; set; }
        public virtual DbSet<TherapeuticUses> TherapeuticUses { get; set; }
        public virtual DbSet<ProductsByEdition> ProductsByEdition { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<NewProducts> NewProducts { get; set; }
        public virtual DbSet<ContentTypes> ContentTypes { get; set; }
        public virtual DbSet<ProductEquipment> ProductEquipment { get; set; }
        public virtual DbSet<ProductSpecies> ProductSpecies { get; set; }
        public virtual DbSet<ProductSubstances> ProductSubstances { get; set; }
        public virtual DbSet<ProductTherapeuticUses> ProductTherapeuticUses { get; set; }
        public virtual DbSet<plm_vwProductsByEdition> plm_vwProductsByEdition { get; set; }
        public virtual DbSet<ImageSizes> ImageSizes { get; set; }
        public virtual DbSet<EditionProductShotsImageSizes> EditionProductShotsImageSizes { get; set; }
        public virtual DbSet<DivisionProducts> DivisionProducts { get; set; }
    
        public virtual ObjectResult<plm_spGetProductsEquipment_Result> plm_spGetProductsEquipment(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsEquipment_Result>("plm_spGetProductsEquipment", productidParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsSpecies_Result> plm_spGetProductsSpecies(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsSpecies_Result>("plm_spGetProductsSpecies", productidParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsSubstances_Result> plm_spGetProductsSubstances(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsSubstances_Result>("plm_spGetProductsSubstances", productidParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsEquipmentSearch_Result> plm_spGetProductsEquipmentSearch(Nullable<int> productid, string param)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var paramParameter = param != null ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsEquipmentSearch_Result>("plm_spGetProductsEquipmentSearch", productidParameter, paramParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsSpeciesSearch_Result> plm_spGetProductsSpeciesSearch(Nullable<int> productid, string param)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var paramParameter = param != null ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsSpeciesSearch_Result>("plm_spGetProductsSpeciesSearch", productidParameter, paramParameter);
        }
    
        public virtual ObjectResult<plm_spGetTherapeuticUsesByProduct_Result> plm_spGetTherapeuticUsesByProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetTherapeuticUsesByProduct_Result>("plm_spGetTherapeuticUsesByProduct", productIdParameter);
        }
    
        public virtual ObjectResult<plm_spGetTherapeuticsTreeSearch_Result> plm_spGetTherapeuticsTreeSearch(string param)
        {
            var paramParameter = param != null ?
                new ObjectParameter("param", param) :
                new ObjectParameter("param", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetTherapeuticsTreeSearch_Result>("plm_spGetTherapeuticsTreeSearch", paramParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsByEdition_Result> plm_spGetProductsByEdition(Nullable<int> editionid, Nullable<int> countryid)
        {
            var editionidParameter = editionid.HasValue ?
                new ObjectParameter("editionid", editionid) :
                new ObjectParameter("editionid", typeof(int));
    
            var countryidParameter = countryid.HasValue ?
                new ObjectParameter("countryid", countryid) :
                new ObjectParameter("countryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsByEdition_Result>("plm_spGetProductsByEdition", editionidParameter, countryidParameter);
        }
    }
}
