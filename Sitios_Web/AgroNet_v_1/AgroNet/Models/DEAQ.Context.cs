//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgroNet.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    
    public partial class DEAQ : DbContext
    {
        public DEAQ()
            : base("name=DEAQ")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ActiveSubstances> ActiveSubstances { get; set; }
        public DbSet<Advertisements> Advertisements { get; set; }
        public DbSet<AgrochemicalUses> AgrochemicalUses { get; set; }
        public DbSet<Books> Books { get; set; }
        public DbSet<Categories> Categories { get; set; }
        public DbSet<Cities> Cities { get; set; }
        public DbSet<Crops> Crops { get; set; }
        public DbSet<DivisionCategories> DivisionCategories { get; set; }
        public DbSet<DivisionCities> DivisionCities { get; set; }
        public DbSet<DivisionImages> DivisionImages { get; set; }
        public DbSet<DivisionInformation> DivisionInformation { get; set; }
        public DbSet<Divisions> Divisions { get; set; }
        public DbSet<EditionDivisionAds> EditionDivisionAds { get; set; }
        public DbSet<EditionDivisionProducts> EditionDivisionProducts { get; set; }
        public DbSet<EditionProductShots> EditionProductShots { get; set; }
        public DbSet<Editions> Editions { get; set; }
        public DbSet<ImageTypes> ImageTypes { get; set; }
        public DbSet<Laboratories> Laboratories { get; set; }
        public DbSet<ParticipantProducts> ParticipantProducts { get; set; }
        public DbSet<PharmaForms> PharmaForms { get; set; }
        public DbSet<ProductCategories> ProductCategories { get; set; }
        public DbSet<ProductCrops> ProductCrops { get; set; }
        public DbSet<ProductPharmaForms> ProductPharmaForms { get; set; }
        public DbSet<Products> Products { get; set; }
        public DbSet<ProductShotTypes> ProductShotTypes { get; set; }
        public DbSet<Seeds> Seeds { get; set; }
        public DbSet<States> States { get; set; }
        public DbSet<Types> Types { get; set; }
        public DbSet<MentionatedProducts> MentionatedProducts { get; set; }
        public DbSet<Newproducts> Newproducts { get; set; }
        public DbSet<Countries> Countries { get; set; }
        public DbSet<PProductSubstances> PProductSubstances { get; set; }
        public DbSet<PProductSeeds> PProductSeeds { get; set; }
        public DbSet<PProductAgrochemicalUses> PProductAgrochemicalUsesSet { get; set; }
        public DbSet<ContentTypes> ContentTypes { get; set; }
        public DbSet<plm_vwProductsByEdition> plm_vwProductsByEdition { get; set; }
        public DbSet<ImageSizes> ImageSizes { get; set; }
        public DbSet<DivisionImagesSizes> DivisionImagesSizes { get; set; }
        public DbSet<ProductImages> ProductImages { get; set; }
        public DbSet<ProductImageSizes> ProductImageSizes { get; set; }
        public DbSet<ProductContents> ProductContents { get; set; }
    
        public virtual ObjectResult<Ventas_Result> Ventas(Nullable<int> countryId, Nullable<int> divisionId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ventas_Result>("Ventas", countryIdParameter, divisionIdParameter);
        }
    
        public virtual ObjectResult<sales_Result> sales(Nullable<int> countryId, Nullable<int> divisionId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sales_Result>("sales", countryIdParameter, divisionIdParameter);
        }
    
        public virtual ObjectResult<SalesModule_Result> SalesModule(Nullable<int> countryId, Nullable<int> divisionId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesModule_Result>("SalesModule", countryIdParameter, divisionIdParameter);
        }
    }
}
