//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Medinet : DbContext
    {
        public Medinet()
            : base("name=Medinet")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Divisions> Divisions { get; set; }
        public virtual DbSet<Editions> Editions { get; set; }
        public virtual DbSet<EditionTypes> EditionTypes { get; set; }
        public virtual DbSet<OffMarkets> OffMarkets { get; set; }
        public virtual DbSet<ParticipantProducts> ParticipantProducts { get; set; }
        public virtual DbSet<PharmaceuticalForms> PharmaceuticalForms { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductPharmaForms> ProductPharmaForms { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProductTypes> ProductTypes { get; set; }
    
        public virtual ObjectResult<plm_spGetCountries_Result> plm_spGetCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetCountries_Result>("plm_spGetCountries");
        }
    
        public virtual ObjectResult<plm_spGetDivisionsByCountry_Result> plm_spGetDivisionsByCountry(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetDivisionsByCountry_Result>("plm_spGetDivisionsByCountry", countryIdParameter);
        }
    
        public virtual ObjectResult<plm_spGetProductsbyDivisionbyCountry_Result> plm_spGetProductsbyDivisionbyCountry(Nullable<int> countryId, Nullable<int> divisionId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetProductsbyDivisionbyCountry_Result>("plm_spGetProductsbyDivisionbyCountry", countryIdParameter, divisionIdParameter);
        }
    
        public virtual ObjectResult<plm_spGetEditionsByProducts_Result> plm_spGetEditionsByProducts(Nullable<int> productId, Nullable<int> categoryId, Nullable<int> pharmaFormId, Nullable<int> divisionId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var pharmaFormIdParameter = pharmaFormId.HasValue ?
                new ObjectParameter("PharmaFormId", pharmaFormId) :
                new ObjectParameter("PharmaFormId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<plm_spGetEditionsByProducts_Result>("plm_spGetEditionsByProducts", productIdParameter, categoryIdParameter, pharmaFormIdParameter, divisionIdParameter);
        }
    }
}
